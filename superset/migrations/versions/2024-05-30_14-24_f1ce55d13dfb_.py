# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
"""empty message

Revision ID: f1ce55d13dfb
Revises: 4b85906e5b91
Create Date: 2024-05-30 14:24:51.058658

"""

# revision identifiers, used by Alembic.
revision = 'f1ce55d13dfb'
down_revision = '4b85906e5b91'

from alembic import op
import logging
import sqlalchemy as sa
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from superset import db

Base = declarative_base()
logger = logging.getLogger("alembic.env")


class UserInfo(Base):  # pylint: disable=too-few-public-methods
    """Declarative class to do query in upgrade"""

    __tablename__ = "user_info"

    id = Column(Integer, primary_key=True)
    language = Column(String(32), default="ru")
    user_id = Column(Integer, ForeignKey("ab_user.id"))


class User(Base):
    """Declarative class to do query in upgrade"""

    __tablename__ = "ab_user"
    id = Column(Integer, primary_key=True)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_info',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('language', sa.String(length=32), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(["user_id"], ["ab_user.id"]),
    sa.PrimaryKeyConstraint('id')
    )
    bind = op.get_bind()
    session = db.Session(bind=bind)
    users = session.query(User.id).all()
    users_id = {user_id: UserInfo(
        id=i+1, language="ru", user_id=user_id[0]
    ) for i, user_id in enumerate(users)
    }
    session.add_all(users_id.values())
    session.commit()
    session.close()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_info')
    # ### end Alembic commands ###
